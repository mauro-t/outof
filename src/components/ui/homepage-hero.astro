---
import LogoHtml from "../global/logo-html.astro";
---

<div
  id="hero-container"
  style="opacity: 0;"
  class="flex h-hero flex-col items-center justify-center p-3 md:p-5"
>
  <div
    class="inline-grid grid-cols-1 grid-rows-2 font-serif text-title-2xl leading-none md:grid-cols-2 md:grid-rows-1 md:gap-12"
  >
    <LogoHtml />
    <div class="relative overflow-hidden text-center italic md:text-left">
      <div id="title-words" class="absolute inset-0">
        <div>Order</div>
        <div>Office</div>
        <div>Place</div>
        <div>Mind</div>
        <div>Time</div>
        <div>Love</div>
        <div>Order</div>
      </div>
    </div>
  </div>
  <div
    id="title-words-paragraphs"
    class="mt-12 grid grid-cols-1 grid-rows-1 text-center"
  >
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è quando il sistema non risponde. Le cose rotte ci parlano di possibilità.
      Di spazi dove infilare nuove regole, o nessuna.
    </p>
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è dove succede la vita. Fuori dall’inquadratura, lontano dalle mail,
      perdiamo il Wi-Fi ma troviamo nuove connessioni.
    </p>
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è sentirsi sbagliati nel posto giusto. È non appartenere mai del tutto. Ed
      è proprio lì che nascono le cose nuove.
    </p>
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è perdersi di vista, lasciar andare la forma, seguire l’idea che
      scompiglia. Pensare troppo. Pensare altro. Pensare ancora.
    </p>
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è non avere tempo da perdere. E nemmeno da sprecare. Solo tempo da usare
      bene, per qualcosa che valga la pena.
    </p>
    <p class="col-start-1 row-start-1 inline-block max-w-174 text-body-md">
      è fare le cose per amore. Anche quando nessuno guarda. Anche quando non
      conviene. Soprattutto, quando sembra inutile.
    </p>
  </div>
</div>

<script>
  import { animate, inView, stagger } from "motion";
  import { splitText } from "../../animations/by-line";

  async function init() {
    let current = 0;
    const paragraphs = document.querySelectorAll<HTMLParagraphElement>(
      "#title-words-paragraphs p"
    );

    paragraphs.forEach((p) => {
      p.style.opacity = "0";
    });

    const performAnimation = async () => {
      const p = current == 6 ? paragraphs[0] : paragraphs[current];
      const prev = paragraphs[current - 1];

      const lines = splitText(p);
      p.style.opacity = "1";

      if (prev) {
        const prevLines = prev.querySelectorAll("span span");
        animate(prevLines, { opacity: 0, y: "-50%" }, { duration: 0.35 }).then(
          () => {
            prev.innerHTML = prev.innerText;
            prev.style.opacity = "0";
          }
        );
      }

      const lineElements = lines.map((line) => {
        const div = document.createElement("span");
        div.className = "block";
        const animated = document.createElement("span");
        animated.className = "block";
        animated.style.opacity = "0";
        animated.style.transform = "translateY(50%)";
        animated.innerText = line;
        div.append(animated);
        p.append(div);
        return animated;
      });

      animate(
        lineElements,
        { y: 0, opacity: 1 },
        { duration: 0.75, delay: stagger(0.1) }
      );

      animate(
        "#title-words",
        {
          y: `-${current * 100}%`,
        },
        { duration: 0.65, ease: [0.6, 0, 0.2, 1] }
      ).then(() => {
        if (current == 6) {
          animate("#title-words", { y: 0 }, { duration: 0 });
          current = 1;
        } else {
          current += 1;
        }
      });
    };

    let prevTime: number | undefined = undefined;

    let frameId = -1;

    function raf(time: number) {
      prevTime ??= time;
      if (time - prevTime >= 3200) {
        performAnimation();
        prevTime = time;
      }
      frameId = requestAnimationFrame(raf);
    }

    inView("#hero-container", () => {
      (async () => {
        await animate(
          "#hero-container",
          { opacity: 1 },
          { duration: 0.55, delay: 0.2 }
        ).finished;
        performAnimation();
        frameId = requestAnimationFrame(raf);
      })();

      return () => {
        cancelAnimationFrame(frameId);
      };
    });
  }

  init();
</script>
